# Dictionary with instruction op codes
mnemo_op_code = {
    "LDA": "0000",
    "ADD": "0001",
    "SUB": "0010",
    "OUT": "1110",
    "HLT": "1111",
    "STA": "1010",
    "LDI": "1011",
    "JMP": "0101",
    "JC" : "0111",
    "JZ" : "1001"
}

op_code_mnemo = {
    '0000' : 'LDA', 
    '0001' : 'ADD',
    '0010' : 'SUB',
    '1110' : 'OUT',
    '1111' : 'HLT',
    "1010" : "STA",
    "1011" : "LDI",
    "0101" : "JMP" ,
    "0111" : "JC" ,
    "1001" : "JZ"
}

def hex_to_binary(hex_number):
    # remove the 0x if present
    hex_number = hex_number.lstrip("0x")

    # Converti the number in binary and add zeros if necessary
    binary_number = bin(int(hex_number, 16))[2:].zfill(4)[:4]

    return binary_number


def convert_mnemo_op_code(instruction):
    op_code = mnemo_op_code.get(instruction, "N/A")
    return op_code

# Function load
def old_load(file_path, ram_instance):

    # Open the file in reading
    with open(file_path, "r") as file:
        # Read each line
        for line_number, line in enumerate(file):
            # Delete blanks
            line = line.strip()

            if line[0].isalpha():
                # Split the line into instruction and hexadecimal number
                parts = line.split()
                
                if len(parts) == 1:
                    # Convert instruction to op code
                    op_code = convert_mnemo_op_code(line)
                    combined_data = op_code + "0000"
                    
                
                if len(parts) == 2:
                    instruction = parts[0]
                    hex_number = parts[1]
                    # Convert instruction to op code
                    op_code = convert_mnemo_op_code(instruction)
                    if hex_number == "0x0":
                        binary_number = "0000"
                    else:
                        # Extract the hexadecimal number from the target line
                        binary_number = hex_to_binary(hex_number)
                    # Combine op code and binary number
                    combined_data = op_code + binary_number
                    
                
            elif not line[0].isalpha():
                # Split the line into instruction and hexadecimal number
                if line == "0x0":
                        combined_data = "00000000"
                else:
                    combined_data = hex_to_binary(line).zfill(8)
            else:
                continue
            # Append combined data to RAM using line number as address
            ram_instance.write(combined_data, line_number)


